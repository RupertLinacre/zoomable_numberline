body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
    overflow: hidden;
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

#chart-container {
    width: 100%;
    /* 3 sections * 200px + 2 paddings * 60px (from script.js) + top/bottom margins (approx 20+30) + button allowance */
    /* Let's set a fixed height for the SVG area and manage padding within JS/SVG attributes */
    /* Or, more simply, ensure the SVG itself has enough height. */
    /* The script calculates sectionHeight based on usableHeight. We need to reverse this. */
    /* If each section is 200px, total for 3 sections = 600px. */
    /* Padding between sections (sectionPadding in JS) is 60px. So 2 * 60 = 120px. */
    /* SVG top/bottom margins (margin.top, margin.bottom in JS) are 20px, 30px. */
    /* Total height needed for SVG content: 600 + 120 + 20 + 30 = 770px */
    /* Plus some for the button and overall page padding. */
    /* Let's make the container itself tall enough. */
    height: calc(100vh - 40px); /* Make it almost full viewport height, leaving space for button if absolutely positioned */
    padding-top: 10px;
}

#numberlines-svg {
    width: 100%;
    /* Height will be set by viewBox in JS, but good to ensure it has space */
    /* The JS will set viewBox height to fullHeight, which is derived from chart-container clientHeight */
    /* So, chart-container needs to be tall enough. */
    /* If each numberline is 200px, and there are 3, plus padding, this will be handled by JS viewBox. */
    /* The key is that setupDimensions in JS will now use a fixed sectionHeight. */
    height: 100%; /* Fill the chart-container */
    display: block;
}

#numberlines-svg {
    width: 100%;
    height: 100%;
    display: block;
}

.axis path,
.axis line {
    fill: none;
    stroke: #333;
    shape-rendering: crispEdges;
    stroke-width: 1.5px;
}

.axis text {
    font-size: 12px;
    fill: #333;
    user-select: none; /* Prevent text selection during drag */
}

.brush .selection {
    fill: steelblue;
    fill-opacity: 0.3;
    stroke: steelblue;
    stroke-width: 2px; /* Changed from 1px to 2px */
}

.brush .handle {
    fill: #555;
    stroke: #333;
    stroke-width: 1px;
}

#resetButton {
    position: absolute;
    top: 15px;
    left: 15px;
    z-index: 10;
    padding: 8px 12px;
    font-size: 14px;
    cursor: pointer;
    background-color: #77aabb;
    color: white;
    border: none;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

#resetButton:hover {
    background-color: #5f8a9a;
}

.numberline-background { /* For zoom event listeners */
    fill: transparent;
}
